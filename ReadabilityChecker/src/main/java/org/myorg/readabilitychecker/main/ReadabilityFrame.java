package org.myorg.readabilitychecker.main;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ParseProblemException;
import com.github.javaparser.ast.CompilationUnit;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import org.myorg.readabilitychecker.codeabstractionlevels.Method;
import org.myorg.readabilitychecker.codeabstractionlevels.SourceCodeFile;
import org.myorg.readabilitychecker.formulas.logic.CommentsRatioLogic;
import org.myorg.readabilitychecker.formulas.logic.PhdLogic;
import org.myorg.readabilitychecker.formulas.logic.SresLogic;
import org.myorg.readabilitychecker.formulas.objects.CommentsRatio;
import org.myorg.readabilitychecker.logic.ReadabilityFrameLogic;
import org.myorg.readabilitychecker.logic.SourceCodeFileLogic;
import org.openide.util.Exceptions;
import java.awt.Desktop;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

/**
 * Main window of the application.
 *
 * @author <a href="mailto:1120301@isep.ipp.pt">Cl√°udio Pinto</a>
 */
public class ReadabilityFrame extends javax.swing.JFrame {

    //private static final Logger LOGGER = Logger.getLogger(ReadabilityFrame.class.getName());
    private List<SourceCodeFile> javaFiles = null;
    private double crProjectReadabilityValue;
    private double sresProjectReadabilityValue;
    private static final int PHD_MAX_LINES = 11;    // Defines the maximum number of lines that a method can have to be evaluated by the PHD formula
    private int phdMethodsAnalyzed; // Number of methods analyzed by PHD for some class (method LOC <= phdMaxLines)
    private SourceCodeFile currentlyOpenedFile; // The currently opened Java file in the IDE by the user
    private String commentsRatioDetailedResults;
    private String sresDetailedResults;
    private String phdDetailedResults;
    private JTextArea jTACommentsRatioDetailedResults;
    private JTextArea jTASRESDetailedResults;
    private JTextArea jTAPHDDetailedResults;

    /**
     * Creates new form ReadabilityFrame.
     */
    public ReadabilityFrame() {
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelCommentsRatio = new javax.swing.JPanel();
        jLblCommentsRatio = new javax.swing.JLabel();
        jTFCommentsRatio = new javax.swing.JTextField();
        jBtnCommentsRatioDetailed = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        disableCommentsRatio = new javax.swing.JCheckBox();
        disableSRES = new javax.swing.JCheckBox();
        disablePHD = new javax.swing.JCheckBox();
        jPanelSRES = new javax.swing.JPanel();
        jLblSRES = new javax.swing.JLabel();
        jBtnSRESDetailed = new javax.swing.JButton();
        jTFSRES = new javax.swing.JTextField();
        jPanelPHD = new javax.swing.JPanel();
        jTFPHD = new javax.swing.JTextField();
        jBtnPHDDetailed = new javax.swing.JButton();
        jLblPHD = new javax.swing.JLabel();
        jBtnCheckReadability = new javax.swing.JButton();
        jBtnExportResults = new javax.swing.JButton();
        jBtnHelp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.title")); // NOI18N
        setLocation(new java.awt.Point(0, 0));
        setName("readabilityFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(530, 271));

        jLblCommentsRatio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLblCommentsRatio, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblCommentsRatio.text")); // NOI18N

        jTFCommentsRatio.setEditable(false);
        jTFCommentsRatio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTFCommentsRatio.setText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jTFCommentsRatio.text")); // NOI18N
        jTFCommentsRatio.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTFCommentsRatio.setPreferredSize(new java.awt.Dimension(95, 28));
        jTFCommentsRatio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFCommentsRatioActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jBtnCommentsRatioDetailed, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnCommentsRatioDetailed.text")); // NOI18N
        jBtnCommentsRatioDetailed.setToolTipText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnCommentsRatioDetailed.toolTipText")); // NOI18N
        jBtnCommentsRatioDetailed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCommentsRatioDetailedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCommentsRatioLayout = new javax.swing.GroupLayout(jPanelCommentsRatio);
        jPanelCommentsRatio.setLayout(jPanelCommentsRatioLayout);
        jPanelCommentsRatioLayout.setHorizontalGroup(
            jPanelCommentsRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentsRatioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblCommentsRatio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jTFCommentsRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBtnCommentsRatioDetailed)
                .addContainerGap())
        );
        jPanelCommentsRatioLayout.setVerticalGroup(
            jPanelCommentsRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentsRatioLayout.createSequentialGroup()
                .addGroup(jPanelCommentsRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCommentsRatioLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanelCommentsRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblCommentsRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFCommentsRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelCommentsRatioLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jBtnCommentsRatioDetailed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(disableCommentsRatio, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.disableCommentsRatio.text")); // NOI18N
        disableCommentsRatio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableCommentsRatioActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(disableSRES, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.disableSRES.text")); // NOI18N
        disableSRES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableSRESActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(disablePHD, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.disablePHD.text")); // NOI18N
        disablePHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disablePHDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(disablePHD)
                    .addComponent(disableSRES)
                    .addComponent(disableCommentsRatio))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(disableCommentsRatio)
                .addGap(32, 32, 32)
                .addComponent(disableSRES)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(disablePHD)
                .addGap(16, 16, 16))
        );

        jLblSRES.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLblSRES, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblSRES.text")); // NOI18N
        jLblSRES.setToolTipText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblSRES.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jBtnSRESDetailed, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnSRESDetailed.text")); // NOI18N
        jBtnSRESDetailed.setActionCommand(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnSRESDetailed.actionCommand")); // NOI18N
        jBtnSRESDetailed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSRESDetailedActionPerformed(evt);
            }
        });

        jTFSRES.setEditable(false);
        jTFSRES.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTFSRES.setText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jTFSRES.text")); // NOI18N
        jTFSRES.setPreferredSize(new java.awt.Dimension(95, 28));

        javax.swing.GroupLayout jPanelSRESLayout = new javax.swing.GroupLayout(jPanelSRES);
        jPanelSRES.setLayout(jPanelSRESLayout);
        jPanelSRESLayout.setHorizontalGroup(
            jPanelSRESLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSRESLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblSRES)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTFSRES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBtnSRESDetailed)
                .addContainerGap())
        );
        jPanelSRESLayout.setVerticalGroup(
            jPanelSRESLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSRESLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSRESLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBtnSRESDetailed, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFSRES, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelSRESLayout.createSequentialGroup()
                        .addComponent(jLblSRES)
                        .addGap(6, 6, 6)))
                .addGap(17, 17, 17))
        );

        jTFPHD.setEditable(false);
        jTFPHD.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTFPHD.setText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jTFPHD.text")); // NOI18N
        jTFPHD.setPreferredSize(new java.awt.Dimension(95, 28));

        org.openide.awt.Mnemonics.setLocalizedText(jBtnPHDDetailed, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnPHDDetailed.text")); // NOI18N
        jBtnPHDDetailed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPHDDetailedActionPerformed(evt);
            }
        });

        jLblPHD.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLblPHD, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblPHD.text")); // NOI18N
        jLblPHD.setToolTipText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblPHD.toolTipText")); // NOI18N

        javax.swing.GroupLayout jPanelPHDLayout = new javax.swing.GroupLayout(jPanelPHD);
        jPanelPHD.setLayout(jPanelPHDLayout);
        jPanelPHDLayout.setHorizontalGroup(
            jPanelPHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPHDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblPHD)
                .addGap(18, 18, 18)
                .addComponent(jTFPHD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jBtnPHDDetailed)
                .addContainerGap())
        );
        jPanelPHDLayout.setVerticalGroup(
            jPanelPHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPHDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBtnPHDDetailed, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelPHDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLblPHD, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTFPHD, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jBtnCheckReadability, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnCheckReadability.text")); // NOI18N
        jBtnCheckReadability.setMaximumSize(new java.awt.Dimension(120, 25));
        jBtnCheckReadability.setMinimumSize(new java.awt.Dimension(120, 25));
        jBtnCheckReadability.setPreferredSize(new java.awt.Dimension(120, 25));
        jBtnCheckReadability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCheckReadabilityActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jBtnExportResults, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnExportResults.text")); // NOI18N
        jBtnExportResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnExportResultsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jBtnHelp, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnHelp.text")); // NOI18N
        jBtnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelSRES, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelPHD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelCommentsRatio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jBtnCheckReadability, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(jBtnExportResults)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnHelp)
                        .addGap(61, 61, 61))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelCommentsRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelSRES, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelPHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnCheckReadability, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnExportResults)
                    .addComponent(jBtnHelp))
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTFCommentsRatioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFCommentsRatioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFCommentsRatioActionPerformed

    /**
     * Shows the detailed results for the SRES formula.
     */
    private void jBtnSRESDetailedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSRESDetailedActionPerformed
        if (jTFSRES.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "SRES value not calculated yet!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            jTASRESDetailedResults = new JTextArea();
            jTASRESDetailedResults.setText(sresDetailedResults);
            jTASRESDetailedResults.setCaretPosition(0);
            jTASRESDetailedResults.setEditable(false);

            JScrollPane scrollPane = new JScrollPane(jTASRESDetailedResults);
            scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setPreferredSize(new Dimension(310, 400));

            JOptionPane.showMessageDialog(null, scrollPane, "SRES Detailed Results", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jBtnSRESDetailedActionPerformed

    /**
     * Shows the detailed results for the Comments Ratio formula analysis.
     */
    private void jBtnCommentsRatioDetailedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCommentsRatioDetailedActionPerformed
        if (jTFCommentsRatio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Comments Ratio value not calculated yet!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            jTACommentsRatioDetailedResults = new JTextArea();
            jTACommentsRatioDetailedResults.setText(commentsRatioDetailedResults);
            jTACommentsRatioDetailedResults.setCaretPosition(0);
            jTACommentsRatioDetailedResults.setEditable(false);

            JScrollPane scrollPane = new JScrollPane(jTACommentsRatioDetailedResults);
            scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setPreferredSize(new Dimension(400, 400));

            JOptionPane.showMessageDialog(null, scrollPane, "Comments Ratio Detailed Results", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jBtnCommentsRatioDetailedActionPerformed

    /**
     * Disables the Comments Ratio formula analysis.
     */
    private void disableCommentsRatioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableCommentsRatioActionPerformed
        jTFCommentsRatio.setText(null);
        jTFCommentsRatio.setToolTipText(null);
        ReadabilityFrameLogic.disableComponents(jPanelCommentsRatio, !disableCommentsRatio.isSelected());
    }//GEN-LAST:event_disableCommentsRatioActionPerformed

    /**
     * Disables the SRES formula analysis.
     */
    private void disableSRESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableSRESActionPerformed
        jTFSRES.setText(null);
        jTFSRES.setToolTipText(null);
        ReadabilityFrameLogic.disableComponents(jPanelSRES, !disableSRES.isSelected());
    }//GEN-LAST:event_disableSRESActionPerformed

    /**
     * Shows the detailed results for the PHD formula analysis.
     */
    private void jBtnPHDDetailedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPHDDetailedActionPerformed
        if (jTFPHD.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "PHD value not calculated yet!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            jTAPHDDetailedResults = new JTextArea();

            if (currentlyOpenedFile != null) {
                if (currentlyOpenedFile.getMethods().isEmpty() || phdMethodsAnalyzed == 0) {
                    jTAPHDDetailedResults.append("No methods to show!");
                } else {
                    jTAPHDDetailedResults.setText(phdDetailedResults);
                }
            } else {
                jTAPHDDetailedResults.append("No methods to show!");
            }

            jTAPHDDetailedResults.setCaretPosition(0);
            jTAPHDDetailedResults.setEditable(false);

            JScrollPane scrollPane = new JScrollPane(jTAPHDDetailedResults);
            scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setPreferredSize(new Dimension(400, 350));

            JOptionPane.showMessageDialog(null, scrollPane, "PHD Detailed Results", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jBtnPHDDetailedActionPerformed

    /**
     * Disables the PHD formula analysis.
     */
    private void disablePHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disablePHDActionPerformed
        jTFPHD.setText(null);
        jTFPHD.setToolTipText(null);
        ReadabilityFrameLogic.disableComponents(jPanelPHD, !disablePHD.isSelected());
    }//GEN-LAST:event_disablePHDActionPerformed

    /**
     * Triggers the readability analysis.
     */
    private void jBtnCheckReadabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCheckReadabilityActionPerformed
        crProjectReadabilityValue = 0;
        sresProjectReadabilityValue = 0;
        phdMethodsAnalyzed = 0;
        SourceCodeFileLogic scfl = new SourceCodeFileLogic();

        /* Get all Java files from the opened project */
        try {
            javaFiles = scfl.getJavaFilesFromProject();

        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

        /* Evaluate readability for each formula that is checked to be testes */
        if (!disableCommentsRatio.isSelected()) {
            CommentsRatioLogic crl = new CommentsRatioLogic();

            for (SourceCodeFile file : javaFiles) {
                try {
                    JavaParser.getStaticConfiguration().setAttributeComments(true);        // configure JavaParser to handle comments

                    CompilationUnit cu = null;
                    try {
                        cu = JavaParser.parse(file.getFile());
                    } catch (ParseProblemException ex) {
                        //LOGGER.log(Level.SEVERE, "an exception was thrown", ex);
                        System.out.println(ex);
                    }

                    if (cu != null) {
                        // Handle class level comments
                        CommentsRatio crClass = crl.analyzeFile(cu);
                        file.setCommentsRatio(crClass);

                        // Handle method level comments
                        ArrayList<Method> fileMethods = file.getMethods();
                        if (fileMethods == null || fileMethods.isEmpty()) {
                            fileMethods = scfl.getMethodsFromFile(cu);
                        }
                        crl.analyzeMethods(fileMethods);
                        file.setMethods(fileMethods);
                    }

                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }

            crProjectReadabilityValue = crl.getReadabilityOfProject(javaFiles);
        }

        if (!disableSRES.isSelected()) {
            SresLogic sl = new SresLogic();

            for (SourceCodeFile file : javaFiles) {
                sl.analyzeFile(file);
            }
            sresProjectReadabilityValue = sl.getReadabilityOfProject(javaFiles);
            System.out.println(sresProjectReadabilityValue);
        }

        if (!disablePHD.isSelected()) {
            PhdLogic pl = new PhdLogic();

            try {
                currentlyOpenedFile = SourceCodeFileLogic.getCurrentlyOpenedFile();

                if (currentlyOpenedFile != null) {
                    JavaParser.getStaticConfiguration().setAttributeComments(true);        // configure JavaParser to handle comments

                    CompilationUnit cu = null;
                    try {
                        cu = JavaParser.parse(currentlyOpenedFile.getFile());
                    } catch (ParseProblemException ex) {
                        System.out.println(ex);
                    }

                    ArrayList<Method> fileMethods = currentlyOpenedFile.getMethods();
                    if ((fileMethods == null || fileMethods.isEmpty()) && cu != null) {
                        fileMethods = scfl.getMethodsFromFile(cu);
                    }

                    phdMethodsAnalyzed = pl.analyzeMethods(fileMethods, PHD_MAX_LINES, phdMethodsAnalyzed);

                    currentlyOpenedFile.setMethods(fileMethods);
                }
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        if (javaFiles != null && !javaFiles.isEmpty()) {                                   // There is an opened project
            /* Changes the text fields values and tooltip texts */
            if (!disableCommentsRatio.isSelected()) {
                if (crProjectReadabilityValue == 0.0) {
                    jTFCommentsRatio.setText("n/a");
                    jTFCommentsRatio.setToolTipText(null);
                } else {
                    jTFCommentsRatio.setText(String.valueOf(new DecimalFormat("#0.00").format(crProjectReadabilityValue)));
                    jTFCommentsRatio.setToolTipText("Project Readability");
                }

                commentsRatioDetailedResults = CommentsRatioLogic.getDetailedResults(javaFiles);
            }

            if (!disableSRES.isSelected()) {
                if (sresProjectReadabilityValue == 0.0) {
                    jTFSRES.setText("n/a");
                    jTFSRES.setToolTipText(null);
                } else {
                    jTFSRES.setText(String.valueOf(String.valueOf(new DecimalFormat("#0.00").format(sresProjectReadabilityValue))));
                    jTFSRES.setToolTipText("Project Readability");
                }

                sresDetailedResults = SresLogic.getDetailedResults(javaFiles);
            }

            if (!disablePHD.isSelected()) {
                if (phdMethodsAnalyzed == 1) {
                    jTFPHD.setText(String.valueOf(String.valueOf(phdMethodsAnalyzed)) + " method analyzed");
                    jTFPHD.setToolTipText("Methods From The Opened File");
                } else {
                    jTFPHD.setText(String.valueOf(String.valueOf(phdMethodsAnalyzed)) + " methods analyzed");
                    jTFPHD.setToolTipText("Methods From The Opened File");
                }

                phdDetailedResults = PhdLogic.getDetailedResults(currentlyOpenedFile);
            }
        } else {
            /* Clear filled fields */
            jTFCommentsRatio.setText(null);
            jTFSRES.setText(null);
            jTFPHD.setText(null);

            /* Clear tooltip texts */
            jTFCommentsRatio.setToolTipText(null);
            jTFSRES.setToolTipText(null);
            jTFPHD.setToolTipText(null);
        }
    }//GEN-LAST:event_jBtnCheckReadabilityActionPerformed

    /**
     * Exports the detailed results for all the formulas in a text file.
     */
    private void jBtnExportResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExportResultsActionPerformed
        if (jTFCommentsRatio.getText().isEmpty() && jTFSRES.getText().isEmpty() && jTFPHD.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No readability values calculated yet!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            StringBuilder output = new StringBuilder();

            output.append("*** Readability Checker Results ***");
            output.append(System.lineSeparator());
            output.append(System.lineSeparator());
            output.append("Project name: " + SourceCodeFileLogic.getOpenedProjectName());
            output.append(System.lineSeparator());
            output.append(System.lineSeparator());

            if (!jTFCommentsRatio.getText().isEmpty()) {
                output.append("# Comments Ratio #");
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append("Project readability: " + jTFCommentsRatio.getText());
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append(commentsRatioDetailedResults);
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
            }

            if (!jTFSRES.getText().isEmpty()) {
                output.append("# SRES #");
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append("Project readability: " + jTFSRES.getText());
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append(sresDetailedResults);
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
            }

            if (!jTFPHD.getText().isEmpty()) {
                output.append("# PHD #");
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append("Number of methods analyzed: " + phdMethodsAnalyzed);
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append(phdDetailedResults);
                output.append(System.lineSeparator());
            }

            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File(ReadabilityFrameLogic.getResultsFileName()));
            //chooser.setFileFilter(new FileNameExtensionFilter("Text Documents (.txt)", "txt", "text"));

            int retrival = chooser.showSaveDialog(null);
            if (retrival == JFileChooser.APPROVE_OPTION) {
                File selectedFile = chooser.getSelectedFile();

                if (selectedFile.exists()) {
                    int response = JOptionPane.showConfirmDialog(null,
                            chooser.getSelectedFile().getName() + " already exists." + System.lineSeparator() + "Do you want to replace it?",
                            "Confirm", JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE);
                    if (response != JOptionPane.YES_OPTION) {
                        return;
                    }
                }

                try (FileWriter fw = new FileWriter(selectedFile)) {
                    fw.write(output.toString());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jBtnExportResultsActionPerformed

    /**
     * Shows some information about the application and the implemented
     * formulas.
     */
    private void jBtnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnHelpActionPerformed
        String content = "<html>"
                + "<b>Readability Checker 1.0.4</b><br />"
                + "<br />"
                + "This is a plugin for the NetBeans IDE that estimates Java code readability using three different software readability formulas.<br />"
                + "<br />"
                + "<b>Comments Ratio</b><br />"
                + "<br />"
                + "CR = LOC / LOM<br />"
                + "<br />"
                + "<i>where:</i><br />"
                + "<i>LOC is the number of lines of code</i><br />"
                + "<i>LOM is the number of lines with comments</i><br />"
                + "<br />"
                + "Readability values should be critically considered as good or bad.<br />"
                + "<br />"
                + "Fully supports Java SE 10.<br />"
                + "<br />"
                + "<b>SRES</b><br />"
                + "<br />"
                + "SRES = ASL - 0.1 * AWL<br />"
                + "<br />"
                + "<i>where:</i><br />"
                + "<i>ASL is the average sentence length</i><br />"
                + "<i>AWL is the average word length</i><br />"
                + "<br />"
                + "Threshold readability value is 6. Values closer to 0 mean more readable code.<br />"
                + "<br />"
                + "Fully supports Java SE 5.<br />"
                + "<br />"
                + "<b>PHD</b><br />"
                + "<br />"
                + "PHD = 1 / (1 + e^-z)<br />"
                + "<br />"
                + "<i>where:</i><br />"
                + "<i>z = 8.87 - 0.033 * Volume + 0.40 * Lines - 1.5 * Entropy</i><br />"
                + "<br />"
                + "Readability values range from 0 to 1. The closer it gets to 1, the more readable the code is.<br />"
                + "<br />"
                + "Fully supports Java SE 5 and only analyzes methods with a maximum of 11 lines of code.<br />"
                + "<br />"
                + "<br />"
                + "For additional information, please refer to <a href=\"https://cdtpinto.github.io/projects/readabilitychecker\">https://cdtpinto.github.io/projects/readabilitychecker</a>"
                + "</html>";

        JEditorPane jEPHelp = new JEditorPane();
        jEPHelp.setContentType("text/html");
        jEPHelp.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
        jEPHelp.setFont(new Font("Segoe UI", 0, 12));
        jEPHelp.setBackground(new Color(240, 240, 240));
        jEPHelp.setEditable(false);
        jEPHelp.setHighlighter(null);
        jEPHelp.setText(content);
        jEPHelp.setCaretPosition(0);
        jEPHelp.addHyperlinkListener(new HyperlinkListener() {
            @Override
            public void hyperlinkUpdate(HyperlinkEvent hle) {
                if (HyperlinkEvent.EventType.ACTIVATED.equals(hle.getEventType())) {
                    System.out.println(hle.getURL());
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(hle.getURL().toURI());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });

        JScrollPane scrollPane = new JScrollPane(jEPHelp);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setPreferredSize(new Dimension(535, 500));

        JOptionPane.showMessageDialog(null, scrollPane, "Help", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jBtnHelpActionPerformed

    /**
     * Triggers the application.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReadabilityFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReadabilityFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReadabilityFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReadabilityFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReadabilityFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox disableCommentsRatio;
    private javax.swing.JCheckBox disablePHD;
    private javax.swing.JCheckBox disableSRES;
    private javax.swing.JButton jBtnCheckReadability;
    private javax.swing.JButton jBtnCommentsRatioDetailed;
    private javax.swing.JButton jBtnExportResults;
    private javax.swing.JButton jBtnHelp;
    private javax.swing.JButton jBtnPHDDetailed;
    private javax.swing.JButton jBtnSRESDetailed;
    private javax.swing.JLabel jLblCommentsRatio;
    private javax.swing.JLabel jLblPHD;
    private javax.swing.JLabel jLblSRES;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCommentsRatio;
    private javax.swing.JPanel jPanelPHD;
    private javax.swing.JPanel jPanelSRES;
    private javax.swing.JTextField jTFCommentsRatio;
    private javax.swing.JTextField jTFPHD;
    private javax.swing.JTextField jTFSRES;
    // End of variables declaration//GEN-END:variables
}
