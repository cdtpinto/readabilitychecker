package org.cdtpinto.readabilitychecker.main;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ParseProblemException;
import com.github.javaparser.ast.CompilationUnit;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import org.cdtpinto.readabilitychecker.codeabstractionlevels.SourceCodeFile;
import org.cdtpinto.readabilitychecker.formulas.logic.CommentsRatioLogic;
import org.cdtpinto.readabilitychecker.formulas.logic.SresLogic;
import org.cdtpinto.readabilitychecker.formulas.objects.CommentsRatio;
import org.cdtpinto.readabilitychecker.logic.ReadabilityFrameLogic;
import org.cdtpinto.readabilitychecker.logic.SourceCodeFileLogic;
import org.openide.util.Exceptions;
import java.awt.Desktop;
import javax.swing.ImageIcon;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import org.cdtpinto.readabilitychecker.formulas.logic.BwLogic;

/**
 * Main window of the application.
 *
 * @author <a href="mailto:1120301@isep.ipp.pt">Cl√°udio Pinto</a>
 */
public class ReadabilityFrame extends javax.swing.JFrame {

    //private static final Logger LOGGER = Logger.getLogger(ReadabilityFrame.class.getName());
    private final String version = "1.1.0"; // current Readability Checker version
    private List<SourceCodeFile> javaFiles = null;
    private double crProjectReadability;
    private double sresProjectReadability;
    private double bwProjectReadability;
    private String commentsRatioDetailedResults;
    private String sresDetailedResults;
    private String bwDetailedResults;
    private JEditorPane jEPCommentsRatioDetailedResults;
    private JEditorPane jEPSresDetailedResults;
    private JEditorPane jEPBwDetailedResults;

    /**
     * Creates new form ReadabilityFrame.
     */
    public ReadabilityFrame() {
        initComponents();
        //ImageIcon img = new ImageIcon("C:\\Users\\Claudio\\Documents\\readabilitychecker\\ReadabilityChecker\\src\\main\\java\\org\\cdtpinto\\readabilitychecker\\images\\readabilitycheckericon20.png");
        ImageIcon img = new ImageIcon("src/main/java/org/cdtpinto/readabilitychecker/images/readabilitycheckericon20.png");
        setIconImage(img.getImage());
        setTitle("Readability Checker " + version);
        jLblBw.setText("B&W:"); // a workaround, so the ampersand character (&) is displayed in the ui
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanelCommentsRatio = new javax.swing.JPanel();
        jLblCommentsRatio = new javax.swing.JLabel();
        jTFCommentsRatio = new javax.swing.JTextField();
        jBtnCommentsRatioDetailed = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        disableCommentsRatio = new javax.swing.JCheckBox();
        disableSres = new javax.swing.JCheckBox();
        disableBw = new javax.swing.JCheckBox();
        jPanelSres = new javax.swing.JPanel();
        jLblSres = new javax.swing.JLabel();
        jBtnSresDetailed = new javax.swing.JButton();
        jTFSres = new javax.swing.JTextField();
        jPanelBw = new javax.swing.JPanel();
        jTFBw = new javax.swing.JTextField();
        jBtnBwDetailed = new javax.swing.JButton();
        jLblBw = new javax.swing.JLabel();
        jBtnCheckReadability = new javax.swing.JButton();
        jBtnExportResults = new javax.swing.JButton();
        jBtnHelp = new javax.swing.JButton();
        jTFSelectedFile = new javax.swing.JTextField();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.title")); // NOI18N
        setLocation(new java.awt.Point(0, 0));
        setName("readabilityFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(530, 271));

        jLblCommentsRatio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLblCommentsRatio, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblCommentsRatio.text")); // NOI18N

        jTFCommentsRatio.setEditable(false);
        jTFCommentsRatio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTFCommentsRatio.setText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jTFCommentsRatio.text")); // NOI18N
        jTFCommentsRatio.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTFCommentsRatio.setPreferredSize(new java.awt.Dimension(95, 28));
        jTFCommentsRatio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFCommentsRatioActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jBtnCommentsRatioDetailed, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnCommentsRatioDetailed.text")); // NOI18N
        jBtnCommentsRatioDetailed.setToolTipText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnCommentsRatioDetailed.toolTipText")); // NOI18N
        jBtnCommentsRatioDetailed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCommentsRatioDetailedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCommentsRatioLayout = new javax.swing.GroupLayout(jPanelCommentsRatio);
        jPanelCommentsRatio.setLayout(jPanelCommentsRatioLayout);
        jPanelCommentsRatioLayout.setHorizontalGroup(
            jPanelCommentsRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentsRatioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblCommentsRatio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(jTFCommentsRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBtnCommentsRatioDetailed)
                .addContainerGap())
        );
        jPanelCommentsRatioLayout.setVerticalGroup(
            jPanelCommentsRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCommentsRatioLayout.createSequentialGroup()
                .addGroup(jPanelCommentsRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelCommentsRatioLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanelCommentsRatioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLblCommentsRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFCommentsRatio, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelCommentsRatioLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jBtnCommentsRatioDetailed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(disableCommentsRatio, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.disableCommentsRatio.text")); // NOI18N
        disableCommentsRatio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableCommentsRatioActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(disableSres, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.disableSres.text")); // NOI18N
        disableSres.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableSresActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(disableBw, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.disableBw.text")); // NOI18N
        disableBw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableBwActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(disableBw)
                    .addComponent(disableSres)
                    .addComponent(disableCommentsRatio))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(disableCommentsRatio)
                .addGap(32, 32, 32)
                .addComponent(disableSres)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(disableBw)
                .addGap(16, 16, 16))
        );

        jLblSres.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLblSres, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblSres.text")); // NOI18N
        jLblSres.setToolTipText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblSres.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jBtnSresDetailed, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnSresDetailed.text")); // NOI18N
        jBtnSresDetailed.setActionCommand(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnSresDetailed.actionCommand")); // NOI18N
        jBtnSresDetailed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSresDetailedActionPerformed(evt);
            }
        });

        jTFSres.setEditable(false);
        jTFSres.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTFSres.setText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jTFSres.text")); // NOI18N
        jTFSres.setPreferredSize(new java.awt.Dimension(95, 28));

        javax.swing.GroupLayout jPanelSresLayout = new javax.swing.GroupLayout(jPanelSres);
        jPanelSres.setLayout(jPanelSresLayout);
        jPanelSresLayout.setHorizontalGroup(
            jPanelSresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblSres)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTFSres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBtnSresDetailed)
                .addContainerGap())
        );
        jPanelSresLayout.setVerticalGroup(
            jPanelSresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBtnSresDetailed, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFSres, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelSresLayout.createSequentialGroup()
                        .addComponent(jLblSres)
                        .addGap(6, 6, 6)))
                .addGap(17, 17, 17))
        );

        jTFBw.setEditable(false);
        jTFBw.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTFBw.setText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jTFBw.text")); // NOI18N
        jTFBw.setPreferredSize(new java.awt.Dimension(95, 28));

        org.openide.awt.Mnemonics.setLocalizedText(jBtnBwDetailed, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnBwDetailed.text")); // NOI18N
        jBtnBwDetailed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBwDetailedActionPerformed(evt);
            }
        });

        jLblBw.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLblBw, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblBw.text")); // NOI18N
        jLblBw.setToolTipText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblBw.toolTipText")); // NOI18N

        javax.swing.GroupLayout jPanelBwLayout = new javax.swing.GroupLayout(jPanelBw);
        jPanelBw.setLayout(jPanelBwLayout);
        jPanelBwLayout.setHorizontalGroup(
            jPanelBwLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBwLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblBw)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTFBw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBtnBwDetailed)
                .addContainerGap())
        );
        jPanelBwLayout.setVerticalGroup(
            jPanelBwLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBwLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBwLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBtnBwDetailed, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelBwLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLblBw, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTFBw, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLblBw.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jLblBw.AccessibleContext.accessibleName")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jBtnCheckReadability, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnCheckReadability.text")); // NOI18N
        jBtnCheckReadability.setMaximumSize(new java.awt.Dimension(120, 25));
        jBtnCheckReadability.setMinimumSize(new java.awt.Dimension(120, 25));
        jBtnCheckReadability.setPreferredSize(new java.awt.Dimension(120, 25));
        jBtnCheckReadability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCheckReadabilityActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jBtnExportResults, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnExportResults.text")); // NOI18N
        jBtnExportResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnExportResultsActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jBtnHelp, org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jBtnHelp.text")); // NOI18N
        jBtnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnHelpActionPerformed(evt);
            }
        });

        jTFSelectedFile.setEditable(false);
        jTFSelectedFile.setText(org.openide.util.NbBundle.getMessage(ReadabilityFrame.class, "ReadabilityFrame.jTFSelectedFile.text")); // NOI18N
        jTFSelectedFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFSelectedFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelSres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelBw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelCommentsRatio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jBtnCheckReadability, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jBtnExportResults)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtnHelp)
                        .addGap(52, 52, 52)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTFSelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelCommentsRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelSres, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelBw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTFSelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnCheckReadability, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnExportResults)
                    .addComponent(jBtnHelp))
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTFCommentsRatioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFCommentsRatioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFCommentsRatioActionPerformed

    /**
     * Shows the detailed results for the SRES formula.
     */
    private void jBtnSresDetailedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSresDetailedActionPerformed
        if (jTFSres.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "SRES value not calculated yet!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            jEPSresDetailedResults = new JEditorPane("text/html", "");
            jEPSresDetailedResults.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
            jEPSresDetailedResults.setFont(new Font("Tahoma", Font.PLAIN, 12));
            jEPSresDetailedResults.setText(sresDetailedResults);
            jEPSresDetailedResults.setCaretPosition(0);
            jEPSresDetailedResults.setEditable(false);

            JScrollPane scrollPane = new JScrollPane(jEPSresDetailedResults);
            scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setPreferredSize(new Dimension(310, 400));

            JOptionPane.showMessageDialog(null, scrollPane, "SRES Detailed Results", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jBtnSresDetailedActionPerformed

    /**
     * Shows the detailed results for the Comments Ratio formula analysis.
     */
    private void jBtnCommentsRatioDetailedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCommentsRatioDetailedActionPerformed
        if (jTFCommentsRatio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Comments Ratio value not calculated yet!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            jEPCommentsRatioDetailedResults = new JEditorPane("text/html", "");
            jEPCommentsRatioDetailedResults.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
            jEPCommentsRatioDetailedResults.setFont(new Font("Tahoma", Font.PLAIN, 12));
            jEPCommentsRatioDetailedResults.setText(commentsRatioDetailedResults);
            jEPCommentsRatioDetailedResults.setCaretPosition(0);
            jEPCommentsRatioDetailedResults.setEditable(false);

            JScrollPane scrollPane = new JScrollPane(jEPCommentsRatioDetailedResults);
            scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setPreferredSize(new Dimension(310, 400));

            JOptionPane.showMessageDialog(null, scrollPane, "Comments Ratio Detailed Results", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jBtnCommentsRatioDetailedActionPerformed

    /**
     * Disables the Comments Ratio formula analysis.
     */
    private void disableCommentsRatioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableCommentsRatioActionPerformed
        jTFCommentsRatio.setText(null);
        jTFCommentsRatio.setToolTipText(null);
        ReadabilityFrameLogic.disableComponents(jPanelCommentsRatio, !disableCommentsRatio.isSelected());
    }//GEN-LAST:event_disableCommentsRatioActionPerformed

    /**
     * Disables the SRES formula analysis.
     */
    private void disableSresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableSresActionPerformed
        jTFSres.setText(null);
        jTFSres.setToolTipText(null);
        ReadabilityFrameLogic.disableComponents(jPanelSres, !disableSres.isSelected());
    }//GEN-LAST:event_disableSresActionPerformed

    /**
     * Shows the detailed results for the B&W metric analysis.
     */
    private void jBtnBwDetailedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBwDetailedActionPerformed
        if (jTFBw.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "B&W value not calculated yet!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            jEPBwDetailedResults = new JEditorPane("text/html", "");
            jEPBwDetailedResults.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
            jEPBwDetailedResults.setFont(new Font("Tahoma", Font.PLAIN, 12));
            jEPBwDetailedResults.setText(bwDetailedResults);
            jEPBwDetailedResults.setCaretPosition(0);
            jEPBwDetailedResults.setEditable(false);

            JScrollPane scrollPane = new JScrollPane(jEPBwDetailedResults);
            scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setPreferredSize(new Dimension(310, 400));

            JOptionPane.showMessageDialog(null, scrollPane, "B&W Detailed Results", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jBtnBwDetailedActionPerformed

    /**
     * Disables the B&W metric analysis.
     */
    private void disableBwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableBwActionPerformed
        jTFBw.setText(null);
        jTFBw.setToolTipText(null);
        ReadabilityFrameLogic.disableComponents(jPanelBw, !disableBw.isSelected());
    }//GEN-LAST:event_disableBwActionPerformed

    /**
     * Triggers the readability analysis.
     */
    private void jBtnCheckReadabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCheckReadabilityActionPerformed
        crProjectReadability = 0;
        sresProjectReadability = 0;
        bwProjectReadability = 0;
        SourceCodeFileLogic scfl = new SourceCodeFileLogic();

        /* Get all Java files from the opened project */
        try {
            javaFiles = scfl.getJavaFilesFromProject();

        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

        /* Evaluate readability for each formula that is checked to be testes */
        if (!disableCommentsRatio.isSelected()) {
            CommentsRatioLogic crl = new CommentsRatioLogic();

            for (SourceCodeFile file : javaFiles) {
                try {
                    JavaParser.getStaticConfiguration().setAttributeComments(true);        // configure JavaParser to handle comments

                    CompilationUnit cu = null;
                    try {
                        cu = JavaParser.parse(file.getFile());
                    } catch (ParseProblemException ex) {
                        //LOGGER.log(Level.SEVERE, "an exception was thrown", ex);
                        System.out.println(ex);
                    }

                    if (cu != null) {
                        // Handle class level comments
                        CommentsRatio crClass = crl.analyzeFile(cu);
                        file.setCommentsRatio(crClass);

                        /*
                        // Handle method level comments
                        ArrayList<Method> fileMethods = file.getMethods();
                        if (fileMethods == null || fileMethods.isEmpty()) {
                            fileMethods = scfl.getMethodsFromFile(cu);
                        }
                        crl.analyzeMethods(fileMethods);
                        file.setMethods(fileMethods);
                         */
                    }

                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }

            crProjectReadability = crl.getReadabilityOfProject(javaFiles);
        }

        if (!disableSres.isSelected()) {
            SresLogic sl = new SresLogic();

            for (SourceCodeFile file : javaFiles) {
                sl.analyzeFile(file);
            }
            sresProjectReadability = sl.getReadabilityOfProject(javaFiles);
        }

        if (!disableBw.isSelected()) {
            BwLogic bwl = new BwLogic();

            for (SourceCodeFile file : javaFiles) {
                try {
                    bwl.analyzeFile(file);
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
            bwProjectReadability = bwl.getReadabilityOfProject(javaFiles);
        }

        if (javaFiles != null && !javaFiles.isEmpty()) {    // There is an opened project
            SourceCodeFile currentlySelectedFile = SourceCodeFileLogic.getCurrentlySelectedFileFromFilesList(SourceCodeFileLogic.getCurrentlyOpenedFile().getFile().getAbsolutePath(), javaFiles);

            /* Changes the text fields values and tooltip texts */
            if (!disableCommentsRatio.isSelected()) {
                if (currentlySelectedFile == null || currentlySelectedFile.getCommentsRatio().getValue() == 0.00) {
                    jTFCommentsRatio.setText("n/a");
                    jTFCommentsRatio.setToolTipText(null);
                } else {
                    jTFCommentsRatio.setText(String.valueOf(new DecimalFormat("#0.00").format(currentlySelectedFile.getCommentsRatio().getValue())));
                    jTFCommentsRatio.setToolTipText(currentlySelectedFile.getFile().getName() + " readability value");
                }

                commentsRatioDetailedResults = CommentsRatioLogic.getDetailedResults(javaFiles, SourceCodeFileLogic.getOpenedProjectName(), crProjectReadability);
            }

            if (!disableSres.isSelected()) {
                if (currentlySelectedFile == null || sresProjectReadability == 0.00) {
                    jTFSres.setText("n/a");
                    jTFSres.setToolTipText(null);
                } else {
                    if (currentlySelectedFile.getSres().getValue() == 0.00) {
                        jTFSres.setText("n/a");
                        jTFSres.setToolTipText("Readability value not calculated. Make sure " + currentlySelectedFile.getFile().getName() + " doesn't have any feature introduced after Java SE 5.");
                    } else {
                        jTFSres.setText(String.valueOf(String.valueOf(new DecimalFormat("#0.00").format(currentlySelectedFile.getSres().getValue()))));
                        jTFSres.setToolTipText(currentlySelectedFile.getFile().getName() + " readability value");
                    }
                }

                sresDetailedResults = SresLogic.getDetailedResults(javaFiles, SourceCodeFileLogic.getOpenedProjectName(), sresProjectReadability);
            }

            if (!disableBw.isSelected()) {
                if (currentlySelectedFile == null || bwProjectReadability == 0.00) {
                    jTFBw.setText("n/a");
                    jTFBw.setToolTipText(null);
                } else {
                    jTFBw.setText(String.valueOf(String.valueOf(new DecimalFormat("#0.00").format(currentlySelectedFile.getBw().getValue()))));
                    jTFBw.setToolTipText(currentlySelectedFile.getFile().getName() + " readability value");
                }

                bwDetailedResults = BwLogic.getDetailedResults(javaFiles, SourceCodeFileLogic.getOpenedProjectName(), bwProjectReadability);
            }
        } else {
            /* Clear filled fields */
            jTFCommentsRatio.setText(null);
            jTFSres.setText(null);
            jTFBw.setText(null);

            /* Clear tooltip texts */
            jTFCommentsRatio.setToolTipText(null);
            jTFSres.setToolTipText(null);
            jTFBw.setToolTipText(null);
        }
    }//GEN-LAST:event_jBtnCheckReadabilityActionPerformed

    /**
     * Exports the detailed results for all the formulas in a text file.
     */
    private void jBtnExportResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExportResultsActionPerformed
        if (jTFCommentsRatio.getText().isEmpty() && jTFSres.getText().isEmpty() && jTFBw.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No readability values calculated yet!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            StringBuilder output = new StringBuilder();

            output.append("*** Readability Checker Results ***");
            output.append(System.lineSeparator());
            output.append(System.lineSeparator());
            output.append("Project name: ");
            output.append(SourceCodeFileLogic.getOpenedProjectName());
            output.append(System.lineSeparator());
            output.append(System.lineSeparator());

            if (!jTFCommentsRatio.getText().isEmpty()) {
                output.append("# Comments Ratio #");
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append("Project readability: ");
                output.append(jTFCommentsRatio.getText());
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append(CommentsRatioLogic.getDetailedResultsForTxtExport(javaFiles, SourceCodeFileLogic.getOpenedProjectName(), crProjectReadability));
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
            }

            if (!jTFSres.getText().isEmpty()) {
                output.append("# SRES #");
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append("Project readability: ");
                output.append(jTFSres.getText());
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append(SresLogic.getDetailedResultsForTxtExport(javaFiles, SourceCodeFileLogic.getOpenedProjectName(), sresProjectReadability));
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
            }

            if (!jTFBw.getText().isEmpty()) {
                output.append("# B&W #");
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append("Project readability: ");
                output.append(jTFBw.getText());
                output.append(System.lineSeparator());
                output.append(System.lineSeparator());
                output.append(BwLogic.getDetailedResultsForTxtExport(javaFiles, SourceCodeFileLogic.getOpenedProjectName(), bwProjectReadability));
            }

            JFileChooser chooser = new JFileChooser();
            chooser.setSelectedFile(new File(ReadabilityFrameLogic.getResultsFileName()));
            //chooser.setFileFilter(new FileNameExtensionFilter("Text Documents (.txt)", "txt", "text"));

            int retrival = chooser.showSaveDialog(null);
            if (retrival == JFileChooser.APPROVE_OPTION) {
                File selectedFile = chooser.getSelectedFile();

                if (selectedFile.exists()) {
                    int response = JOptionPane.showConfirmDialog(null,
                            chooser.getSelectedFile().getName() + " already exists." + System.lineSeparator() + "Do you want to replace it?",
                            "Confirm", JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE);
                    if (response != JOptionPane.YES_OPTION) {
                        return;
                    }
                }

                try (FileWriter fw = new FileWriter(selectedFile)) {
                    fw.write(output.toString());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jBtnExportResultsActionPerformed

    /**
     * Shows some information about the application and the implemented
     * formulas.
     */
    private void jBtnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnHelpActionPerformed
        String content = "<html>"
                + "<b>Readability Checker "
                + version
                + "</b><br />"
                + "<br />"
                + "This is a plugin for the NetBeans IDE that estimates Java code readability using three different software readability formulas and metrics.<br />"
                + "<br />"
                + "<b>Comments Ratio</b><br />"
                + "<br />"
                + "Readability values should be critically considered as good or bad.<br />"
                + "Fully supports Java SE 11.<br />"
                + "<br />"
                + "<b>SRES</b><br />"
                + "<br />"
                + "Threshold readability value is 6. Values closer to 0 mean more readable code.<br />"
                + "Fully supports Java SE 5.<br />"
                + "<br />"
                + "<b>B&W</b><br />"
                + "<br />"
                + "Readability values range from 0 to 1. The closer it gets to 1, the more readable the code is.<br />"
                + "Fully supports Java SE 11.<br />"
                + "<br />"
                + "For additional information, and further details on the formulas and metrics, please refer to <a href=\"https://cdtpinto.github.io/pages/readabilitychecker\">https://cdtpinto.github.io/pages/readabilitychecker</a>"
                + "</html>";

        JEditorPane jEPHelp = new JEditorPane();
        jEPHelp.setContentType("text/html");
        jEPHelp.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, Boolean.TRUE);
        jEPHelp.setFont(new Font("Segoe UI", 0, 12));
        jEPHelp.setBackground(new Color(240, 240, 240));
        jEPHelp.setEditable(false);
        jEPHelp.setHighlighter(null);
        jEPHelp.setText(content);
        jEPHelp.setCaretPosition(0);
        jEPHelp.addHyperlinkListener(new HyperlinkListener() {
            @Override
            public void hyperlinkUpdate(HyperlinkEvent hle) {
                if (HyperlinkEvent.EventType.ACTIVATED.equals(hle.getEventType())) {
                    //System.out.println(hle.getURL());
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(hle.getURL().toURI());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });

        JScrollPane scrollPane = new JScrollPane(jEPHelp);
        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setPreferredSize(new Dimension(535, 375));

        JOptionPane.showMessageDialog(null, scrollPane, "Help", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jBtnHelpActionPerformed

    private void jTFSelectedFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFSelectedFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFSelectedFileActionPerformed

    /**
     * Triggers the application.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReadabilityFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReadabilityFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReadabilityFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReadabilityFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReadabilityFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox disableBw;
    private javax.swing.JCheckBox disableCommentsRatio;
    private javax.swing.JCheckBox disableSres;
    private javax.swing.JButton jBtnBwDetailed;
    private javax.swing.JButton jBtnCheckReadability;
    private javax.swing.JButton jBtnCommentsRatioDetailed;
    private javax.swing.JButton jBtnExportResults;
    private javax.swing.JButton jBtnHelp;
    private javax.swing.JButton jBtnSresDetailed;
    private javax.swing.JLabel jLblBw;
    private javax.swing.JLabel jLblCommentsRatio;
    private javax.swing.JLabel jLblSres;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelBw;
    private javax.swing.JPanel jPanelCommentsRatio;
    private javax.swing.JPanel jPanelSres;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFBw;
    private javax.swing.JTextField jTFCommentsRatio;
    private javax.swing.JTextField jTFSelectedFile;
    private javax.swing.JTextField jTFSres;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
